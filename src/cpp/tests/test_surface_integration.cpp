/**
  * \file test_surface_integration.cpp
  *
  * Tests for the surface integration support module
  */

#include<surface_integration.h>
#include<sstream>
#include<fstream>

#define BOOST_TEST_MODULE test_surface_integration
#include <boost/test/included/unit_test.hpp>
#include <boost/test/tools/output_test_stream.hpp>

typedef errorTools::Node errorNode; //!< Redefinition for the error node
typedef errorNode* errorOut; //!< Redefinition for a pointer to the error node
typedef surfaceIntegration::floatType floatType; //!< Redefinition for the float type
typedef surfaceIntegration::floatVector floatVector; //1< Redefinition for the float vector
typedef surfaceIntegration::floatMatrix floatMatrix; //1< Redefinition for the float matrix

struct cout_redirect{
    cout_redirect( std::streambuf * new_buffer)
        : old( std::cout.rdbuf( new_buffer ) )
    { }

    ~cout_redirect( ) {
        std::cout.rdbuf( old );
    }

    private:
        std::streambuf * old;
};

BOOST_AUTO_TEST_CASE( test_buildSurfacePoints ){

    floatType x0 =  0.3929383711957233;
    floatType y0 = -0.42772133009924107;
    floatType z0 = -0.5462970928715938;
    floatType dx =  0.10262953816578246;
    floatType dy =  0.43893793957112615;
    unsigned int n_points_edge_x = 5;
    unsigned int n_points_edge_y = 6;

    floatVector result;

    floatVector answer = { 0.39293837, -0.42772133, -0.54629709,  0.49556791, -0.42772133,
                          -0.54629709,  0.59819745, -0.42772133, -0.54629709,  0.70082699,
                          -0.42772133, -0.54629709,  0.80345652, -0.42772133, -0.54629709,
                           0.39293837,  0.01121661, -0.54629709,  0.49556791,  0.01121661,
                          -0.54629709,  0.59819745,  0.01121661, -0.54629709,  0.70082699,
                           0.01121661, -0.54629709,  0.80345652,  0.01121661, -0.54629709,
                           0.39293837,  0.45015455, -0.54629709,  0.49556791,  0.45015455,
                          -0.54629709,  0.59819745,  0.45015455, -0.54629709,  0.70082699,
                           0.45015455, -0.54629709,  0.80345652,  0.45015455, -0.54629709,
                           0.39293837,  0.88909249, -0.54629709,  0.49556791,  0.88909249,
                          -0.54629709,  0.59819745,  0.88909249, -0.54629709,  0.70082699,
                           0.88909249, -0.54629709,  0.80345652,  0.88909249, -0.54629709,
                           0.39293837,  1.32803043, -0.54629709,  0.49556791,  1.32803043,
                          -0.54629709,  0.59819745,  1.32803043, -0.54629709,  0.70082699,
                           1.32803043, -0.54629709,  0.80345652,  1.32803043, -0.54629709,
                           0.39293837,  1.76696837, -0.54629709,  0.49556791,  1.76696837,
                          -0.54629709,  0.59819745,  1.76696837, -0.54629709,  0.70082699,
                           1.76696837, -0.54629709,  0.80345652,  1.76696837, -0.54629709 };

    BOOST_CHECK( !surfaceIntegration::buildSurfacePoints( x0, y0, z0, dx, dy, n_points_edge_x, n_points_edge_y, result ) );

    BOOST_CHECK( vectorTools::fuzzyEquals( result, answer ) );

}

BOOST_AUTO_TEST_CASE( test_rotatePoints ){

    floatVector points = { 0.39293837, -0.42772133, -0.54629709,  0.10262954,  0.43893794,
                          -0.15378708,  0.9615284 ,  0.36965948, -0.0381362 , -0.21576496,
                          -0.31364397,  0.45809941, -0.12285551, -0.88064421, -0.20391149,
                           0.47599081, -0.63501654, -0.64909649,  0.06310275,  0.06365517,
                           0.26880192,  0.69886359,  0.44891065,  0.22204702,  0.44488677,
                          -0.35408217, -0.27642269, -0.54347354, -0.41257191,  0.26195225 };

    floatType thetaX = -0.8157901201098496;
    floatType thetaY = -0.13259765464094353;
    floatType thetaZ = -0.1382744733407124;

    floatVector answer = { 0.29876665, -0.73920054, -0.0103761 ,  0.1824409 ,  0.16523358,
                          -0.40775359,  1.01375449,  0.08664871, -0.16562965, -0.2664906 ,
                           0.15690994,  0.50906204, -0.28995028, -0.71889812,  0.48095937,
                           0.33986109, -0.9639332 ,  0.080416  ,  0.07689573,  0.23098794,
                           0.14498284,  0.77369311,  0.36619883, -0.08082919,  0.36661806,
                          -0.49925749,  0.12665336, -0.60908828, -0.0080854 ,  0.40391106 };

    floatVector result;

    BOOST_CHECK( !surfaceIntegration::rotatePoints( points, thetaX, thetaY, thetaZ, result ) );

    BOOST_CHECK( vectorTools::fuzzyEquals( result, answer ) );

}

BOOST_AUTO_TEST_CASE( test_formSurfaceConnectivity ){

    std::vector< unsigned int > surfaceIDs = {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
                                               17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
                                               34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
                                               51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62 };

    unsigned int n_elements_x = 3;

    unsigned int n_elements_y = 4;

    unsigned int index = 3;

    std::vector< unsigned int > result( 15 * 9 + 1, 0 );

    std::vector< unsigned int > answer = {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
                                            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
                                            0,  0,  2, 16, 14,  1,  9, 15,  7,  8,  2,  4, 18,
                                           16,  3, 11, 17,  9, 10,  4,  6, 20, 18,  5, 13, 19,
                                           11, 12, 14, 16, 30, 28, 15, 23, 29, 21, 22, 16, 18,
                                           32, 30, 17, 25, 31, 23, 24, 18, 20, 34, 32, 19, 27,
                                           33, 25, 26, 28, 30, 44, 42, 29, 37, 43, 35, 36, 30,
                                           32, 46, 44, 31, 39, 45, 37, 38, 32, 34, 48, 46, 33,
                                           41, 47, 39, 40, 42, 44, 58, 56, 43, 51, 57, 49, 50,
                                           44, 46, 60, 58, 45, 53, 59, 51, 52, 46, 48, 62, 60,
                                           47, 55, 61, 53, 54,  0 };

    unsigned int index_answer = 15;

    BOOST_CHECK( !surfaceIntegration::formSurfaceConnectivity( surfaceIDs, n_elements_x, n_elements_y, index, result ) );

    BOOST_CHECK( vectorTools::fuzzyEquals( answer, result ) );

    BOOST_CHECK( index_answer == index ); 

}

BOOST_AUTO_TEST_CASE( test_formBaseCubePoints ){

    unsigned int elementCount = 3;

    floatVector result;

    floatVector answer = { -1.00000000e+00, -1.00000000e+00,  1.00000000e+00, -6.66666667e-01,
                           -1.00000000e+00,  1.00000000e+00, -3.33333333e-01, -1.00000000e+00,
                            1.00000000e+00, -1.11022302e-16, -1.00000000e+00,  1.00000000e+00,
                            3.33333333e-01, -1.00000000e+00,  1.00000000e+00,  6.66666667e-01,
                           -1.00000000e+00,  1.00000000e+00,  1.00000000e+00, -1.00000000e+00,
                            1.00000000e+00, -1.00000000e+00, -6.66666667e-01,  1.00000000e+00,
                           -6.66666667e-01, -6.66666667e-01,  1.00000000e+00, -3.33333333e-01,
                           -6.66666667e-01,  1.00000000e+00, -1.11022302e-16, -6.66666667e-01,
                            1.00000000e+00,  3.33333333e-01, -6.66666667e-01,  1.00000000e+00,
                            6.66666667e-01, -6.66666667e-01,  1.00000000e+00,  1.00000000e+00,
                           -6.66666667e-01,  1.00000000e+00, -1.00000000e+00, -3.33333333e-01,
                            1.00000000e+00, -6.66666667e-01, -3.33333333e-01,  1.00000000e+00,
                           -3.33333333e-01, -3.33333333e-01,  1.00000000e+00, -1.11022302e-16,
                           -3.33333333e-01,  1.00000000e+00,  3.33333333e-01, -3.33333333e-01,
                            1.00000000e+00,  6.66666667e-01, -3.33333333e-01,  1.00000000e+00,
                            1.00000000e+00, -3.33333333e-01,  1.00000000e+00, -1.00000000e+00,
                           -1.11022302e-16,  1.00000000e+00, -6.66666667e-01, -1.11022302e-16,
                            1.00000000e+00, -3.33333333e-01, -1.11022302e-16,  1.00000000e+00,
                           -1.11022302e-16, -1.11022302e-16,  1.00000000e+00,  3.33333333e-01,
                           -1.11022302e-16,  1.00000000e+00,  6.66666667e-01, -1.11022302e-16,
                            1.00000000e+00,  1.00000000e+00, -1.11022302e-16,  1.00000000e+00,
                           -1.00000000e+00,  3.33333333e-01,  1.00000000e+00, -6.66666667e-01,
                            3.33333333e-01,  1.00000000e+00, -3.33333333e-01,  3.33333333e-01,
                            1.00000000e+00, -1.11022302e-16,  3.33333333e-01,  1.00000000e+00,
                            3.33333333e-01,  3.33333333e-01,  1.00000000e+00,  6.66666667e-01,
                            3.33333333e-01,  1.00000000e+00,  1.00000000e+00,  3.33333333e-01,
                            1.00000000e+00, -1.00000000e+00,  6.66666667e-01,  1.00000000e+00,
                           -6.66666667e-01,  6.66666667e-01,  1.00000000e+00, -3.33333333e-01,
                            6.66666667e-01,  1.00000000e+00, -1.11022302e-16,  6.66666667e-01,
                            1.00000000e+00,  3.33333333e-01,  6.66666667e-01,  1.00000000e+00,
                            6.66666667e-01,  6.66666667e-01,  1.00000000e+00,  1.00000000e+00,
                            6.66666667e-01,  1.00000000e+00, -1.00000000e+00,  1.00000000e+00,
                            1.00000000e+00, -6.66666667e-01,  1.00000000e+00,  1.00000000e+00,
                           -3.33333333e-01,  1.00000000e+00,  1.00000000e+00, -1.11022302e-16,
                            1.00000000e+00,  1.00000000e+00,  3.33333333e-01,  1.00000000e+00,
                            1.00000000e+00,  6.66666667e-01,  1.00000000e+00,  1.00000000e+00,
                            1.00000000e+00,  1.00000000e+00,  1.00000000e+00, -1.00000000e+00,
                            1.00000000e+00,  6.66666667e-01, -6.66666667e-01,  1.00000000e+00,
                            6.66666667e-01, -3.33333333e-01,  1.00000000e+00,  6.66666667e-01,
                           -1.11022302e-16,  1.00000000e+00,  6.66666667e-01,  3.33333333e-01,
                            1.00000000e+00,  6.66666667e-01,  6.66666667e-01,  1.00000000e+00,
                            6.66666667e-01,  1.00000000e+00,  1.00000000e+00,  6.66666667e-01,
                           -1.00000000e+00,  1.00000000e+00,  3.33333333e-01, -6.66666667e-01,
                            1.00000000e+00,  3.33333333e-01, -3.33333333e-01,  1.00000000e+00,
                            3.33333333e-01, -1.11022302e-16,  1.00000000e+00,  3.33333333e-01,
                            3.33333333e-01,  1.00000000e+00,  3.33333333e-01,  6.66666667e-01,
                            1.00000000e+00,  3.33333333e-01,  1.00000000e+00,  1.00000000e+00,
                            3.33333333e-01, -1.00000000e+00,  1.00000000e+00,  1.72254642e-16,
                           -6.66666667e-01,  1.00000000e+00,  1.72254642e-16, -3.33333333e-01,
                            1.00000000e+00,  1.72254642e-16, -1.11022302e-16,  1.00000000e+00,
                            1.72254642e-16,  3.33333333e-01,  1.00000000e+00,  1.72254642e-16,
                            6.66666667e-01,  1.00000000e+00,  1.72254642e-16,  1.00000000e+00,
                            1.00000000e+00,  1.72254642e-16, -1.00000000e+00,  1.00000000e+00,
                           -3.33333333e-01, -6.66666667e-01,  1.00000000e+00, -3.33333333e-01,
                           -3.33333333e-01,  1.00000000e+00, -3.33333333e-01, -1.11022302e-16,
                            1.00000000e+00, -3.33333333e-01,  3.33333333e-01,  1.00000000e+00,
                           -3.33333333e-01,  6.66666667e-01,  1.00000000e+00, -3.33333333e-01,
                            1.00000000e+00,  1.00000000e+00, -3.33333333e-01, -1.00000000e+00,
                            1.00000000e+00, -6.66666667e-01, -6.66666667e-01,  1.00000000e+00,
                           -6.66666667e-01, -3.33333333e-01,  1.00000000e+00, -6.66666667e-01,
                           -1.11022302e-16,  1.00000000e+00, -6.66666667e-01,  3.33333333e-01,
                            1.00000000e+00, -6.66666667e-01,  6.66666667e-01,  1.00000000e+00,
                           -6.66666667e-01,  1.00000000e+00,  1.00000000e+00, -6.66666667e-01,
                           -1.00000000e+00,  1.00000000e+00, -1.00000000e+00, -6.66666667e-01,
                            1.00000000e+00, -1.00000000e+00, -3.33333333e-01,  1.00000000e+00,
                           -1.00000000e+00, -1.11022302e-16,  1.00000000e+00, -1.00000000e+00,
                            3.33333333e-01,  1.00000000e+00, -1.00000000e+00,  6.66666667e-01,
                            1.00000000e+00, -1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
                           -1.00000000e+00, -1.00000000e+00,  6.66666667e-01, -1.00000000e+00,
                           -6.66666667e-01,  6.66666667e-01, -1.00000000e+00, -3.33333333e-01,
                            6.66666667e-01, -1.00000000e+00, -1.11022302e-16,  6.66666667e-01,
                           -1.00000000e+00,  3.33333333e-01,  6.66666667e-01, -1.00000000e+00,
                            6.66666667e-01,  6.66666667e-01, -1.00000000e+00,  1.00000000e+00,
                            6.66666667e-01, -1.00000000e+00, -1.00000000e+00,  3.33333333e-01,
                           -1.00000000e+00, -6.66666667e-01,  3.33333333e-01, -1.00000000e+00,
                           -3.33333333e-01,  3.33333333e-01, -1.00000000e+00, -1.11022302e-16,
                            3.33333333e-01, -1.00000000e+00,  3.33333333e-01,  3.33333333e-01,
                           -1.00000000e+00,  6.66666667e-01,  3.33333333e-01, -1.00000000e+00,
                            1.00000000e+00,  3.33333333e-01, -1.00000000e+00, -1.00000000e+00,
                            2.33486982e-16, -1.00000000e+00, -6.66666667e-01,  2.33486982e-16,
                           -1.00000000e+00, -3.33333333e-01,  2.33486982e-16, -1.00000000e+00,
                           -1.11022302e-16,  2.33486982e-16, -1.00000000e+00,  3.33333333e-01,
                            2.33486982e-16, -1.00000000e+00,  6.66666667e-01,  2.33486982e-16,
                           -1.00000000e+00,  1.00000000e+00,  2.33486982e-16, -1.00000000e+00,
                           -1.00000000e+00, -3.33333333e-01, -1.00000000e+00, -6.66666667e-01,
                           -3.33333333e-01, -1.00000000e+00, -3.33333333e-01, -3.33333333e-01,
                           -1.00000000e+00, -1.11022302e-16, -3.33333333e-01, -1.00000000e+00,
                            3.33333333e-01, -3.33333333e-01, -1.00000000e+00,  6.66666667e-01,
                           -3.33333333e-01, -1.00000000e+00,  1.00000000e+00, -3.33333333e-01,
                           -1.00000000e+00, -1.00000000e+00, -6.66666667e-01, -1.00000000e+00,
                           -6.66666667e-01, -6.66666667e-01, -1.00000000e+00, -3.33333333e-01,
                           -6.66666667e-01, -1.00000000e+00, -1.11022302e-16, -6.66666667e-01,
                           -1.00000000e+00,  3.33333333e-01, -6.66666667e-01, -1.00000000e+00,
                            6.66666667e-01, -6.66666667e-01, -1.00000000e+00,  1.00000000e+00,
                           -6.66666667e-01, -1.00000000e+00, -1.00000000e+00, -1.00000000e+00,
                           -1.00000000e+00, -6.66666667e-01, -1.00000000e+00, -1.00000000e+00,
                           -3.33333333e-01, -1.00000000e+00, -1.00000000e+00, -1.11022302e-16,
                           -1.00000000e+00, -1.00000000e+00,  3.33333333e-01, -1.00000000e+00,
                           -1.00000000e+00,  6.66666667e-01, -1.00000000e+00, -1.00000000e+00,
                            1.00000000e+00, -1.00000000e+00, -1.00000000e+00, -1.00000000e+00,
                           -1.00000000e+00, -6.66666667e-01, -6.66666667e-01, -1.00000000e+00,
                           -6.66666667e-01, -3.33333333e-01, -1.00000000e+00, -6.66666667e-01,
                           -1.11022302e-16, -1.00000000e+00, -6.66666667e-01,  3.33333333e-01,
                           -1.00000000e+00, -6.66666667e-01,  6.66666667e-01, -1.00000000e+00,
                           -6.66666667e-01,  1.00000000e+00, -1.00000000e+00, -6.66666667e-01,
                           -1.00000000e+00, -1.00000000e+00, -3.33333333e-01, -6.66666667e-01,
                           -1.00000000e+00, -3.33333333e-01, -3.33333333e-01, -1.00000000e+00,
                           -3.33333333e-01, -1.11022302e-16, -1.00000000e+00, -3.33333333e-01,
                            3.33333333e-01, -1.00000000e+00, -3.33333333e-01,  6.66666667e-01,
                           -1.00000000e+00, -3.33333333e-01,  1.00000000e+00, -1.00000000e+00,
                           -3.33333333e-01, -1.00000000e+00, -1.00000000e+00, -2.94719322e-16,
                           -6.66666667e-01, -1.00000000e+00, -2.94719322e-16, -3.33333333e-01,
                           -1.00000000e+00, -2.94719322e-16, -1.11022302e-16, -1.00000000e+00,
                           -2.94719322e-16,  3.33333333e-01, -1.00000000e+00, -2.94719322e-16,
                            6.66666667e-01, -1.00000000e+00, -2.94719322e-16,  1.00000000e+00,
                           -1.00000000e+00, -2.94719322e-16, -1.00000000e+00, -1.00000000e+00,
                            3.33333333e-01, -6.66666667e-01, -1.00000000e+00,  3.33333333e-01,
                           -3.33333333e-01, -1.00000000e+00,  3.33333333e-01, -1.11022302e-16,
                           -1.00000000e+00,  3.33333333e-01,  3.33333333e-01, -1.00000000e+00,
                            3.33333333e-01,  6.66666667e-01, -1.00000000e+00,  3.33333333e-01,
                            1.00000000e+00, -1.00000000e+00,  3.33333333e-01, -1.00000000e+00,
                           -1.00000000e+00,  6.66666667e-01, -6.66666667e-01, -1.00000000e+00,
                            6.66666667e-01, -3.33333333e-01, -1.00000000e+00,  6.66666667e-01,
                           -1.11022302e-16, -1.00000000e+00,  6.66666667e-01,  3.33333333e-01,
                           -1.00000000e+00,  6.66666667e-01,  6.66666667e-01, -1.00000000e+00,
                            6.66666667e-01,  1.00000000e+00, -1.00000000e+00,  6.66666667e-01,
                            1.00000000e+00, -6.66666667e-01,  6.66666667e-01,  1.00000000e+00,
                           -6.66666667e-01,  3.33333333e-01,  1.00000000e+00, -6.66666667e-01,
                            1.72254642e-16,  1.00000000e+00, -6.66666667e-01, -3.33333333e-01,
                            1.00000000e+00, -6.66666667e-01, -6.66666667e-01,  1.00000000e+00,
                           -3.33333333e-01,  6.66666667e-01,  1.00000000e+00, -3.33333333e-01,
                            3.33333333e-01,  1.00000000e+00, -3.33333333e-01,  1.72254642e-16,
                            1.00000000e+00, -3.33333333e-01, -3.33333333e-01,  1.00000000e+00,
                           -3.33333333e-01, -6.66666667e-01,  1.00000000e+00, -1.11022302e-16,
                            6.66666667e-01,  1.00000000e+00, -1.11022302e-16,  3.33333333e-01,
                            1.00000000e+00, -1.11022302e-16,  1.72254642e-16,  1.00000000e+00,
                           -1.11022302e-16, -3.33333333e-01,  1.00000000e+00, -1.11022302e-16,
                           -6.66666667e-01,  1.00000000e+00,  3.33333333e-01,  6.66666667e-01,
                            1.00000000e+00,  3.33333333e-01,  3.33333333e-01,  1.00000000e+00,
                            3.33333333e-01,  1.72254642e-16,  1.00000000e+00,  3.33333333e-01,
                           -3.33333333e-01,  1.00000000e+00,  3.33333333e-01, -6.66666667e-01,
                            1.00000000e+00,  6.66666667e-01,  6.66666667e-01,  1.00000000e+00,
                            6.66666667e-01,  3.33333333e-01,  1.00000000e+00,  6.66666667e-01,
                            1.72254642e-16,  1.00000000e+00,  6.66666667e-01, -3.33333333e-01,
                            1.00000000e+00,  6.66666667e-01, -6.66666667e-01, -1.00000000e+00,
                           -6.66666667e-01, -6.66666667e-01, -1.00000000e+00, -6.66666667e-01,
                           -3.33333333e-01, -1.00000000e+00, -6.66666667e-01, -4.97899625e-17,
                           -1.00000000e+00, -6.66666667e-01,  3.33333333e-01, -1.00000000e+00,
                           -6.66666667e-01,  6.66666667e-01, -1.00000000e+00, -3.33333333e-01,
                           -6.66666667e-01, -1.00000000e+00, -3.33333333e-01, -3.33333333e-01,
                           -1.00000000e+00, -3.33333333e-01, -4.97899625e-17, -1.00000000e+00,
                           -3.33333333e-01,  3.33333333e-01, -1.00000000e+00, -3.33333333e-01,
                            6.66666667e-01, -1.00000000e+00, -1.11022302e-16, -6.66666667e-01,
                           -1.00000000e+00, -1.11022302e-16, -3.33333333e-01, -1.00000000e+00,
                           -1.11022302e-16, -4.97899625e-17, -1.00000000e+00, -1.11022302e-16,
                            3.33333333e-01, -1.00000000e+00, -1.11022302e-16,  6.66666667e-01,
                           -1.00000000e+00,  3.33333333e-01, -6.66666667e-01, -1.00000000e+00,
                            3.33333333e-01, -3.33333333e-01, -1.00000000e+00,  3.33333333e-01,
                           -4.97899625e-17, -1.00000000e+00,  3.33333333e-01,  3.33333333e-01,
                           -1.00000000e+00,  3.33333333e-01,  6.66666667e-01, -1.00000000e+00,
                            6.66666667e-01, -6.66666667e-01, -1.00000000e+00,  6.66666667e-01,
                           -3.33333333e-01, -1.00000000e+00,  6.66666667e-01, -4.97899625e-17,
                           -1.00000000e+00,  6.66666667e-01,  3.33333333e-01, -1.00000000e+00,
                            6.66666667e-01,  6.66666667e-01 };

    BOOST_CHECK( !surfaceIntegration::formBaseCubePoints( elementCount, result ) );

    BOOST_CHECK( vectorTools::fuzzyEquals( answer, result ) );

}

BOOST_AUTO_TEST_CASE( test_formCubeConnectivity ){

    unsigned int elementCount = 3;

    std::vector< unsigned int > result;

    std::vector< unsigned int > answer = {  0,   2,  16,  14,   1,   9,  15,   7,   8,   2,   4,  18,  16,
                                            3,  11,  17,   9,  10,   4,   6,  20,  18,   5,  13,  19,  11,
                                           12,  14,  16,  30,  28,  15,  23,  29,  21,  22,  16,  18,  32,
                                           30,  17,  25,  31,  23,  24,  18,  20,  34,  32,  19,  27,  33,
                                           25,  26,  28,  30,  44,  42,  29,  37,  43,  35,  36,  30,  32,
                                           46,  44,  31,  39,  45,  37,  38,  32,  34,  48,  46,  33,  41,
                                           47,  39,  40,  42,  44,  58,  56,  43,  51,  57,  49,  50,  44,
                                           46,  60,  58,  45,  53,  59,  51,  52,  46,  48,  62,  60,  47,
                                           55,  61,  53,  54,  56,  58,  72,  70,  57,  65,  71,  63,  64,
                                           58,  60,  74,  72,  59,  67,  73,  65,  66,  60,  62,  76,  74,
                                           61,  69,  75,  67,  68,  70,  72,  86,  84,  71,  79,  85,  77,
                                           78,  72,  74,  88,  86,  73,  81,  87,  79,  80,  74,  76,  90,
                                           88,  75,  83,  89,  81,  82,  84,  86, 100,  98,  85,  93,  99,
                                           91,  92,  86,  88, 102, 100,  87,  95, 101,  93,  94,  88,  90,
                                          104, 102,  89,  97, 103,  95,  96,  98, 100, 114, 112,  99, 107,
                                          113, 105, 106, 100, 102, 116, 114, 101, 109, 115, 107, 108, 102,
                                          104, 118, 116, 103, 111, 117, 109, 110, 112, 114, 128, 126, 113,
                                          121, 127, 119, 120, 114, 116, 130, 128, 115, 123, 129, 121, 122,
                                          116, 118, 132, 130, 117, 125, 131, 123, 124, 126, 128, 142, 140,
                                          127, 135, 141, 133, 134, 128, 130, 144, 142, 129, 137, 143, 135,
                                          136, 130, 132, 146, 144, 131, 139, 145, 137, 138, 140, 142, 156,
                                          154, 141, 149, 155, 147, 148, 142, 144, 158, 156, 143, 151, 157,
                                          149, 150, 144, 146, 160, 158, 145, 153, 159, 151, 152, 154, 156,
                                            2,   0, 155, 163,   1, 161, 162, 156, 158,   4,   2, 157, 165,
                                            3, 163, 164, 158, 160,   6,   4, 159, 167,   5, 165, 166,   6,
                                          160, 174,  20, 167, 169, 173,  13, 168, 160, 146, 176, 174, 153,
                                          171, 175, 169, 170, 146, 132, 118, 176, 139, 125, 177, 171, 172,
                                           20, 174, 184,  34, 173, 179, 183,  27, 178, 174, 176, 186, 184,
                                          175, 181, 185, 179, 180, 176, 118, 104, 186, 177, 111, 187, 181,
                                          182,  34, 184,  62,  48, 183, 189,  55,  41, 188, 184, 186,  76,
                                           62, 185, 191,  69, 189, 190, 186, 104,  90,  76, 187,  97,  83,
                                          191, 192, 126, 140, 199, 112, 133, 194, 198, 119, 193, 140, 154,
                                          201, 199, 147, 196, 200, 194, 195, 154,   0,  14, 201, 161,   7,
                                          202, 196, 197, 112, 199, 209,  98, 198, 204, 208, 105, 203, 199,
                                          201, 211, 209, 200, 206, 210, 204, 205, 201,  14,  28, 211, 202,
                                           21, 212, 206, 207,  98, 209,  70,  84, 208, 214,  77,  91, 213,
                                          209, 211,  56,  70, 210, 216,  63, 214, 215, 211,  28,  42,  56,
                                          212,  35,  49, 216, 217 };

    BOOST_CHECK( !surfaceIntegration::formCubeConnectivity( elementCount, result ) );

    BOOST_CHECK( vectorTools::fuzzyEquals( answer, result ) );

}

BOOST_AUTO_TEST_CASE( test_decomposeSphere ){

    floatType radius = .47;

    unsigned int elementCount = 3;

    floatVector pointsResult;

    std::vector< unsigned int > connectivityResult;

    floatVector pointsAnswer = { -2.71354627e-01, -2.71354627e-01,  2.71354627e-01, -2.00408673e-01,
                                 -3.00613010e-01,  3.00613010e-01, -1.07825395e-01, -3.23476185e-01,
                                  3.23476185e-01, -3.68971728e-17, -3.32340187e-01,  3.32340187e-01,
                                  1.07825395e-01, -3.23476185e-01,  3.23476185e-01,  2.00408673e-01,
                                 -3.00613010e-01,  3.00613010e-01,  2.71354627e-01, -2.71354627e-01,
                                  2.71354627e-01, -3.00613010e-01, -2.00408673e-01,  3.00613010e-01,
                                 -2.27983488e-01, -2.27983488e-01,  3.41975231e-01, -1.25612784e-01,
                                 -2.51225567e-01,  3.76838351e-01, -4.34167855e-17, -2.60709092e-01,
                                  3.91063638e-01,  1.25612784e-01, -2.51225567e-01,  3.76838351e-01,
                                  2.27983488e-01, -2.27983488e-01,  3.41975231e-01,  3.00613010e-01,
                                 -2.00408673e-01,  3.00613010e-01, -3.23476185e-01, -1.07825395e-01,
                                  3.23476185e-01, -2.51225567e-01, -1.25612784e-01,  3.76838351e-01,
                                 -1.41710332e-01, -1.41710332e-01,  4.25130996e-01, -4.95027519e-17,
                                 -1.48627050e-01,  4.45881150e-01,  1.41710332e-01, -1.41710332e-01,
                                  4.25130996e-01,  2.51225567e-01, -1.25612784e-01,  3.76838351e-01,
                                  3.23476185e-01, -1.07825395e-01,  3.23476185e-01, -3.32340187e-01,
                                 -3.68971728e-17,  3.32340187e-01, -2.60709092e-01, -4.34167855e-17,
                                  3.91063638e-01, -1.48627050e-01, -4.95027519e-17,  4.45881150e-01,
                                 -5.21804822e-17, -5.21804822e-17,  4.70000000e-01,  1.48627050e-01,
                                 -4.95027519e-17,  4.45881150e-01,  2.60709092e-01, -4.34167855e-17,
                                  3.91063638e-01,  3.32340187e-01, -3.68971728e-17,  3.32340187e-01,
                                 -3.23476185e-01,  1.07825395e-01,  3.23476185e-01, -2.51225567e-01,
                                  1.25612784e-01,  3.76838351e-01, -1.41710332e-01,  1.41710332e-01,
                                  4.25130996e-01, -4.95027519e-17,  1.48627050e-01,  4.45881150e-01,
                                  1.41710332e-01,  1.41710332e-01,  4.25130996e-01,  2.51225567e-01,
                                  1.25612784e-01,  3.76838351e-01,  3.23476185e-01,  1.07825395e-01,
                                  3.23476185e-01, -3.00613010e-01,  2.00408673e-01,  3.00613010e-01,
                                 -2.27983488e-01,  2.27983488e-01,  3.41975231e-01, -1.25612784e-01,
                                  2.51225567e-01,  3.76838351e-01, -4.34167855e-17,  2.60709092e-01,
                                  3.91063638e-01,  1.25612784e-01,  2.51225567e-01,  3.76838351e-01,
                                  2.27983488e-01,  2.27983488e-01,  3.41975231e-01,  3.00613010e-01,
                                  2.00408673e-01,  3.00613010e-01, -2.71354627e-01,  2.71354627e-01,
                                  2.71354627e-01, -2.00408673e-01,  3.00613010e-01,  3.00613010e-01,
                                 -1.07825395e-01,  3.23476185e-01,  3.23476185e-01, -3.68971728e-17,
                                  3.32340187e-01,  3.32340187e-01,  1.07825395e-01,  3.23476185e-01,
                                  3.23476185e-01,  2.00408673e-01,  3.00613010e-01,  3.00613010e-01,
                                  2.71354627e-01,  2.71354627e-01,  2.71354627e-01, -3.00613010e-01,
                                  3.00613010e-01,  2.00408673e-01, -2.27983488e-01,  3.41975231e-01,
                                  2.27983488e-01, -1.25612784e-01,  3.76838351e-01,  2.51225567e-01,
                                 -4.34167855e-17,  3.91063638e-01,  2.60709092e-01,  1.25612784e-01,
                                  3.76838351e-01,  2.51225567e-01,  2.27983488e-01,  3.41975231e-01,
                                  2.27983488e-01,  3.00613010e-01,  3.00613010e-01,  2.00408673e-01,
                                 -3.23476185e-01,  3.23476185e-01,  1.07825395e-01, -2.51225567e-01,
                                  3.76838351e-01,  1.25612784e-01, -1.41710332e-01,  4.25130996e-01,
                                  1.41710332e-01, -4.95027519e-17,  4.45881150e-01,  1.48627050e-01,
                                  1.41710332e-01,  4.25130996e-01,  1.41710332e-01,  2.51225567e-01,
                                  3.76838351e-01,  1.25612784e-01,  3.23476185e-01,  3.23476185e-01,
                                  1.07825395e-01, -3.32340187e-01,  3.32340187e-01,  5.72471401e-17,
                                 -2.60709092e-01,  3.91063638e-01,  6.73625272e-17, -1.48627050e-01,
                                  4.45881150e-01,  7.68050981e-17, -5.21804822e-17,  4.70000000e-01,
                                  8.09596819e-17,  1.48627050e-01,  4.45881150e-01,  7.68050981e-17,
                                  2.60709092e-01,  3.91063638e-01,  6.73625272e-17,  3.32340187e-01,
                                  3.32340187e-01,  5.72471401e-17, -3.23476185e-01,  3.23476185e-01,
                                 -1.07825395e-01, -2.51225567e-01,  3.76838351e-01, -1.25612784e-01,
                                 -1.41710332e-01,  4.25130996e-01, -1.41710332e-01, -4.95027519e-17,
                                  4.45881150e-01, -1.48627050e-01,  1.41710332e-01,  4.25130996e-01,
                                 -1.41710332e-01,  2.51225567e-01,  3.76838351e-01, -1.25612784e-01,
                                  3.23476185e-01,  3.23476185e-01, -1.07825395e-01, -3.00613010e-01,
                                  3.00613010e-01, -2.00408673e-01, -2.27983488e-01,  3.41975231e-01,
                                 -2.27983488e-01, -1.25612784e-01,  3.76838351e-01, -2.51225567e-01,
                                 -4.34167855e-17,  3.91063638e-01, -2.60709092e-01,  1.25612784e-01,
                                  3.76838351e-01, -2.51225567e-01,  2.27983488e-01,  3.41975231e-01,
                                 -2.27983488e-01,  3.00613010e-01,  3.00613010e-01, -2.00408673e-01,
                                 -2.71354627e-01,  2.71354627e-01, -2.71354627e-01, -2.00408673e-01,
                                  3.00613010e-01, -3.00613010e-01, -1.07825395e-01,  3.23476185e-01,
                                 -3.23476185e-01, -3.68971728e-17,  3.32340187e-01, -3.32340187e-01,
                                  1.07825395e-01,  3.23476185e-01, -3.23476185e-01,  2.00408673e-01,
                                  3.00613010e-01, -3.00613010e-01,  2.71354627e-01,  2.71354627e-01,
                                 -2.71354627e-01, -3.00613010e-01,  2.00408673e-01, -3.00613010e-01,
                                 -2.27983488e-01,  2.27983488e-01, -3.41975231e-01, -1.25612784e-01,
                                  2.51225567e-01, -3.76838351e-01, -4.34167855e-17,  2.60709092e-01,
                                 -3.91063638e-01,  1.25612784e-01,  2.51225567e-01, -3.76838351e-01,
                                  2.27983488e-01,  2.27983488e-01, -3.41975231e-01,  3.00613010e-01,
                                  2.00408673e-01, -3.00613010e-01, -3.23476185e-01,  1.07825395e-01,
                                 -3.23476185e-01, -2.51225567e-01,  1.25612784e-01, -3.76838351e-01,
                                 -1.41710332e-01,  1.41710332e-01, -4.25130996e-01, -4.95027519e-17,
                                  1.48627050e-01, -4.45881150e-01,  1.41710332e-01,  1.41710332e-01,
                                 -4.25130996e-01,  2.51225567e-01,  1.25612784e-01, -3.76838351e-01,
                                  3.23476185e-01,  1.07825395e-01, -3.23476185e-01, -3.32340187e-01,
                                  7.75971074e-17, -3.32340187e-01, -2.60709092e-01,  9.13082688e-17,
                                 -3.91063638e-01, -1.48627050e-01,  1.04107444e-16, -4.45881150e-01,
                                 -5.21804822e-17,  1.09738882e-16, -4.70000000e-01,  1.48627050e-01,
                                  1.04107444e-16, -4.45881150e-01,  2.60709092e-01,  9.13082688e-17,
                                 -3.91063638e-01,  3.32340187e-01,  7.75971074e-17, -3.32340187e-01,
                                 -3.23476185e-01, -1.07825395e-01, -3.23476185e-01, -2.51225567e-01,
                                 -1.25612784e-01, -3.76838351e-01, -1.41710332e-01, -1.41710332e-01,
                                 -4.25130996e-01, -4.95027519e-17, -1.48627050e-01, -4.45881150e-01,
                                  1.41710332e-01, -1.41710332e-01, -4.25130996e-01,  2.51225567e-01,
                                 -1.25612784e-01, -3.76838351e-01,  3.23476185e-01, -1.07825395e-01,
                                 -3.23476185e-01, -3.00613010e-01, -2.00408673e-01, -3.00613010e-01,
                                 -2.27983488e-01, -2.27983488e-01, -3.41975231e-01, -1.25612784e-01,
                                 -2.51225567e-01, -3.76838351e-01, -4.34167855e-17, -2.60709092e-01,
                                 -3.91063638e-01,  1.25612784e-01, -2.51225567e-01, -3.76838351e-01,
                                  2.27983488e-01, -2.27983488e-01, -3.41975231e-01,  3.00613010e-01,
                                 -2.00408673e-01, -3.00613010e-01, -2.71354627e-01, -2.71354627e-01,
                                 -2.71354627e-01, -2.00408673e-01, -3.00613010e-01, -3.00613010e-01,
                                 -1.07825395e-01, -3.23476185e-01, -3.23476185e-01, -3.68971728e-17,
                                 -3.32340187e-01, -3.32340187e-01,  1.07825395e-01, -3.23476185e-01,
                                 -3.23476185e-01,  2.00408673e-01, -3.00613010e-01, -3.00613010e-01,
                                  2.71354627e-01, -2.71354627e-01, -2.71354627e-01, -3.00613010e-01,
                                 -3.00613010e-01, -2.00408673e-01, -2.27983488e-01, -3.41975231e-01,
                                 -2.27983488e-01, -1.25612784e-01, -3.76838351e-01, -2.51225567e-01,
                                 -4.34167855e-17, -3.91063638e-01, -2.60709092e-01,  1.25612784e-01,
                                 -3.76838351e-01, -2.51225567e-01,  2.27983488e-01, -3.41975231e-01,
                                 -2.27983488e-01,  3.00613010e-01, -3.00613010e-01, -2.00408673e-01,
                                 -3.23476185e-01, -3.23476185e-01, -1.07825395e-01, -2.51225567e-01,
                                 -3.76838351e-01, -1.25612784e-01, -1.41710332e-01, -4.25130996e-01,
                                 -1.41710332e-01, -4.95027519e-17, -4.45881150e-01, -1.48627050e-01,
                                  1.41710332e-01, -4.25130996e-01, -1.41710332e-01,  2.51225567e-01,
                                 -3.76838351e-01, -1.25612784e-01,  3.23476185e-01, -3.23476185e-01,
                                 -1.07825395e-01, -3.32340187e-01, -3.32340187e-01, -9.79470747e-17,
                                 -2.60709092e-01, -3.91063638e-01, -1.15254010e-16, -1.48627050e-01,
                                 -4.45881150e-01, -1.31409790e-16, -5.21804822e-17, -4.70000000e-01,
                                 -1.38518081e-16,  1.48627050e-01, -4.45881150e-01, -1.31409790e-16,
                                  2.60709092e-01, -3.91063638e-01, -1.15254010e-16,  3.32340187e-01,
                                 -3.32340187e-01, -9.79470747e-17, -3.23476185e-01, -3.23476185e-01,
                                  1.07825395e-01, -2.51225567e-01, -3.76838351e-01,  1.25612784e-01,
                                 -1.41710332e-01, -4.25130996e-01,  1.41710332e-01, -4.95027519e-17,
                                 -4.45881150e-01,  1.48627050e-01,  1.41710332e-01, -4.25130996e-01,
                                  1.41710332e-01,  2.51225567e-01, -3.76838351e-01,  1.25612784e-01,
                                  3.23476185e-01, -3.23476185e-01,  1.07825395e-01, -3.00613010e-01,
                                 -3.00613010e-01,  2.00408673e-01, -2.27983488e-01, -3.41975231e-01,
                                  2.27983488e-01, -1.25612784e-01, -3.76838351e-01,  2.51225567e-01,
                                 -4.34167855e-17, -3.91063638e-01,  2.60709092e-01,  1.25612784e-01,
                                 -3.76838351e-01,  2.51225567e-01,  2.27983488e-01, -3.41975231e-01,
                                  2.27983488e-01,  3.00613010e-01, -3.00613010e-01,  2.00408673e-01,
                                  3.41975231e-01, -2.27983488e-01,  2.27983488e-01,  3.76838351e-01,
                                 -2.51225567e-01,  1.25612784e-01,  3.91063638e-01, -2.60709092e-01,
                                  6.73625272e-17,  3.76838351e-01, -2.51225567e-01, -1.25612784e-01,
                                  3.41975231e-01, -2.27983488e-01, -2.27983488e-01,  3.76838351e-01,
                                 -1.25612784e-01,  2.51225567e-01,  4.25130996e-01, -1.41710332e-01,
                                  1.41710332e-01,  4.45881150e-01, -1.48627050e-01,  7.68050981e-17,
                                  4.25130996e-01, -1.41710332e-01, -1.41710332e-01,  3.76838351e-01,
                                 -1.25612784e-01, -2.51225567e-01,  3.91063638e-01, -4.34167855e-17,
                                  2.60709092e-01,  4.45881150e-01, -4.95027519e-17,  1.48627050e-01,
                                  4.70000000e-01, -5.21804822e-17,  8.09596819e-17,  4.45881150e-01,
                                 -4.95027519e-17, -1.48627050e-01,  3.91063638e-01, -4.34167855e-17,
                                 -2.60709092e-01,  3.76838351e-01,  1.25612784e-01,  2.51225567e-01,
                                  4.25130996e-01,  1.41710332e-01,  1.41710332e-01,  4.45881150e-01,
                                  1.48627050e-01,  7.68050981e-17,  4.25130996e-01,  1.41710332e-01,
                                 -1.41710332e-01,  3.76838351e-01,  1.25612784e-01, -2.51225567e-01,
                                  3.41975231e-01,  2.27983488e-01,  2.27983488e-01,  3.76838351e-01,
                                  2.51225567e-01,  1.25612784e-01,  3.91063638e-01,  2.60709092e-01,
                                  6.73625272e-17,  3.76838351e-01,  2.51225567e-01, -1.25612784e-01,
                                  3.41975231e-01,  2.27983488e-01, -2.27983488e-01, -3.41975231e-01,
                                 -2.27983488e-01, -2.27983488e-01, -3.76838351e-01, -2.51225567e-01,
                                 -1.25612784e-01, -3.91063638e-01, -2.60709092e-01, -1.94710439e-17,
                                 -3.76838351e-01, -2.51225567e-01,  1.25612784e-01, -3.41975231e-01,
                                 -2.27983488e-01,  2.27983488e-01, -3.76838351e-01, -1.25612784e-01,
                                 -2.51225567e-01, -4.25130996e-01, -1.41710332e-01, -1.41710332e-01,
                                 -4.45881150e-01, -1.48627050e-01, -2.22004057e-17, -4.25130996e-01,
                                 -1.41710332e-01,  1.41710332e-01, -3.76838351e-01, -1.25612784e-01,
                                  2.51225567e-01, -3.91063638e-01, -4.34167855e-17, -2.60709092e-01,
                                 -4.45881150e-01, -4.95027519e-17, -1.48627050e-01, -4.70000000e-01,
                                 -5.21804822e-17, -2.34012824e-17, -4.45881150e-01, -4.95027519e-17,
                                  1.48627050e-01, -3.91063638e-01, -4.34167855e-17,  2.60709092e-01,
                                 -3.76838351e-01,  1.25612784e-01, -2.51225567e-01, -4.25130996e-01,
                                  1.41710332e-01, -1.41710332e-01, -4.45881150e-01,  1.48627050e-01,
                                 -2.22004057e-17, -4.25130996e-01,  1.41710332e-01,  1.41710332e-01,
                                 -3.76838351e-01,  1.25612784e-01,  2.51225567e-01, -3.41975231e-01,
                                  2.27983488e-01, -2.27983488e-01, -3.76838351e-01,  2.51225567e-01,
                                 -1.25612784e-01, -3.91063638e-01,  2.60709092e-01, -1.94710439e-17,
                                 -3.76838351e-01,  2.51225567e-01,  1.25612784e-01, -3.41975231e-01,
                                  2.27983488e-01,  2.27983488e-01 };

    std::vector< unsigned int > connectivityAnswer = {  0,   2,  16,  14,   1,   9,  15,   7,   8,   2,   4,  18,  16,
                                                        3,  11,  17,   9,  10,   4,   6,  20,  18,   5,  13,  19,  11,
                                                       12,  14,  16,  30,  28,  15,  23,  29,  21,  22,  16,  18,  32,
                                                       30,  17,  25,  31,  23,  24,  18,  20,  34,  32,  19,  27,  33,
                                                       25,  26,  28,  30,  44,  42,  29,  37,  43,  35,  36,  30,  32,
                                                       46,  44,  31,  39,  45,  37,  38,  32,  34,  48,  46,  33,  41,
                                                       47,  39,  40,  42,  44,  58,  56,  43,  51,  57,  49,  50,  44,
                                                       46,  60,  58,  45,  53,  59,  51,  52,  46,  48,  62,  60,  47,
                                                       55,  61,  53,  54,  56,  58,  72,  70,  57,  65,  71,  63,  64,
                                                       58,  60,  74,  72,  59,  67,  73,  65,  66,  60,  62,  76,  74,
                                                       61,  69,  75,  67,  68,  70,  72,  86,  84,  71,  79,  85,  77,
                                                       78,  72,  74,  88,  86,  73,  81,  87,  79,  80,  74,  76,  90,
                                                       88,  75,  83,  89,  81,  82,  84,  86, 100,  98,  85,  93,  99,
                                                       91,  92,  86,  88, 102, 100,  87,  95, 101,  93,  94,  88,  90,
                                                      104, 102,  89,  97, 103,  95,  96,  98, 100, 114, 112,  99, 107,
                                                      113, 105, 106, 100, 102, 116, 114, 101, 109, 115, 107, 108, 102,
                                                      104, 118, 116, 103, 111, 117, 109, 110, 112, 114, 128, 126, 113,
                                                      121, 127, 119, 120, 114, 116, 130, 128, 115, 123, 129, 121, 122,
                                                      116, 118, 132, 130, 117, 125, 131, 123, 124, 126, 128, 142, 140,
                                                      127, 135, 141, 133, 134, 128, 130, 144, 142, 129, 137, 143, 135,
                                                      136, 130, 132, 146, 144, 131, 139, 145, 137, 138, 140, 142, 156,
                                                      154, 141, 149, 155, 147, 148, 142, 144, 158, 156, 143, 151, 157,
                                                      149, 150, 144, 146, 160, 158, 145, 153, 159, 151, 152, 154, 156,
                                                        2,   0, 155, 163,   1, 161, 162, 156, 158,   4,   2, 157, 165,
                                                        3, 163, 164, 158, 160,   6,   4, 159, 167,   5, 165, 166,   6,
                                                      160, 174,  20, 167, 169, 173,  13, 168, 160, 146, 176, 174, 153,
                                                      171, 175, 169, 170, 146, 132, 118, 176, 139, 125, 177, 171, 172,
                                                       20, 174, 184,  34, 173, 179, 183,  27, 178, 174, 176, 186, 184,
                                                      175, 181, 185, 179, 180, 176, 118, 104, 186, 177, 111, 187, 181,
                                                      182,  34, 184,  62,  48, 183, 189,  55,  41, 188, 184, 186,  76,
                                                       62, 185, 191,  69, 189, 190, 186, 104,  90,  76, 187,  97,  83,
                                                      191, 192, 126, 140, 199, 112, 133, 194, 198, 119, 193, 140, 154,
                                                      201, 199, 147, 196, 200, 194, 195, 154,   0,  14, 201, 161,   7,
                                                      202, 196, 197, 112, 199, 209,  98, 198, 204, 208, 105, 203, 199,
                                                      201, 211, 209, 200, 206, 210, 204, 205, 201,  14,  28, 211, 202,
                                                       21, 212, 206, 207,  98, 209,  70,  84, 208, 214,  77,  91, 213,
                                                      209, 211,  56,  70, 210, 216,  63, 214, 215, 211,  28,  42,  56,
                                                      212,  35,  49, 216, 217 };

    BOOST_CHECK( !surfaceIntegration::decomposeSphere( radius, elementCount, pointsResult, connectivityResult ) );

    BOOST_CHECK( vectorTools::fuzzyEquals( pointsAnswer, pointsResult ) );

    BOOST_CHECK( vectorTools::fuzzyEquals( connectivityAnswer, connectivityResult ) );

}
